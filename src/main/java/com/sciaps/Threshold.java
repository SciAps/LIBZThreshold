/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.sciaps;

import au.com.bytecode.opencsv.CSVWriter;
import com.devsmart.swing.BackgroundTask;
import com.sciaps.common.ThresholdObj;
import com.sciaps.model.ThresholdTableModel;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JProgressBar;

/**
 *
 * @author jchen
 */
public class Threshold extends javax.swing.JFrame {

    private final ThresholdTableModel mTableModel;

    /**
     * Creates new form Threshold
     */
    public Threshold() {
        addWindowListener(
                new java.awt.event.WindowAdapter() {
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        doExit();
                    }
                }
        );

        initComponents();

        java.net.URL imgURL = getClass().getResource("/images/sciaps_icon.png");
        if (imgURL != null) {
            ImageIcon icon = new ImageIcon(imgURL);
            this.setIconImage(icon.getImage());
        }

        mTableModel = new ThresholdTableModel();
        mTblThreshold.setModel(mTableModel);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        mTblThreshold = new javax.swing.JTable();
        mTableControlPanel = new javax.swing.JPanel();
        mBtnAddNew = new javax.swing.JButton();
        mBtnDelete = new javax.swing.JButton();
        mAppControlPanel = new javax.swing.JPanel();
        mBtnSave = new javax.swing.JButton();
        mBtnExit = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        mnuSave = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        mnuExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Threshold and Cutoff");
        getContentPane().setLayout(new java.awt.GridBagLayout());

        mTblThreshold.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(mTblThreshold);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 353;
        gridBagConstraints.ipady = 249;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        getContentPane().add(jScrollPane1, gridBagConstraints);

        mBtnAddNew.setText("Add New");
        mBtnAddNew.setMaximumSize(new java.awt.Dimension(100, 25));
        mBtnAddNew.setMinimumSize(new java.awt.Dimension(100, 25));
        mBtnAddNew.setPreferredSize(new java.awt.Dimension(100, 25));
        mBtnAddNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtnAddNewActionPerformed(evt);
            }
        });
        mTableControlPanel.add(mBtnAddNew);

        mBtnDelete.setText("Delete");
        mBtnDelete.setMaximumSize(new java.awt.Dimension(100, 25));
        mBtnDelete.setMinimumSize(new java.awt.Dimension(100, 25));
        mBtnDelete.setPreferredSize(new java.awt.Dimension(100, 25));
        mBtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtnDeleteActionPerformed(evt);
            }
        });
        mTableControlPanel.add(mBtnDelete);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        getContentPane().add(mTableControlPanel, gridBagConstraints);

        mAppControlPanel.setBackground(new java.awt.Color(204, 204, 204));
        mAppControlPanel.setLayout(new java.awt.GridBagLayout());

        mBtnSave.setText("Save");
        mBtnSave.setMaximumSize(new java.awt.Dimension(100, 25));
        mBtnSave.setMinimumSize(new java.awt.Dimension(100, 25));
        mBtnSave.setPreferredSize(new java.awt.Dimension(100, 25));
        mBtnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtnSaveActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 0);
        mAppControlPanel.add(mBtnSave, gridBagConstraints);

        mBtnExit.setText("Exit");
        mBtnExit.setMaximumSize(new java.awt.Dimension(100, 25));
        mBtnExit.setMinimumSize(new java.awt.Dimension(100, 25));
        mBtnExit.setPreferredSize(new java.awt.Dimension(100, 25));
        mBtnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mBtnExitActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mAppControlPanel.add(mBtnExit, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        getContentPane().add(mAppControlPanel, gridBagConstraints);

        jMenu1.setText("File");

        mnuSave.setText("Save");
        mnuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveActionPerformed(evt);
            }
        });
        jMenu1.add(mnuSave);
        jMenu1.add(jSeparator1);

        mnuExit.setText("Exit");
        mnuExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExitActionPerformed(evt);
            }
        });
        jMenu1.add(mnuExit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void mBtnAddNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtnAddNewActionPerformed
        doAddNew();
    }//GEN-LAST:event_mBtnAddNewActionPerformed

    private void mBtnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtnSaveActionPerformed

        try {
            doSave();
        } catch (IOException ex) {
            Logger.getLogger(Threshold.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mBtnSaveActionPerformed

    private void mBtnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtnExitActionPerformed
        doExit();
    }//GEN-LAST:event_mBtnExitActionPerformed

    private void mBtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mBtnDeleteActionPerformed
        doDelete();
    }//GEN-LAST:event_mBtnDeleteActionPerformed

    private void mnuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveActionPerformed
        try {
            doSave();
        } catch (IOException ex) {
            Logger.getLogger(Threshold.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_mnuSaveActionPerformed

    private void mnuExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExitActionPerformed
        doExit();
    }//GEN-LAST:event_mnuExitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Threshold.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Threshold.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Threshold.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Threshold.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Threshold mainFrame = new Threshold();
                mainFrame.setLocationRelativeTo(null);
                mainFrame.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPanel mAppControlPanel;
    private javax.swing.JButton mBtnAddNew;
    private javax.swing.JButton mBtnDelete;
    private javax.swing.JButton mBtnExit;
    private javax.swing.JButton mBtnSave;
    private javax.swing.JPanel mTableControlPanel;
    private javax.swing.JTable mTblThreshold;
    private javax.swing.JMenuItem mnuExit;
    private javax.swing.JMenuItem mnuSave;
    // End of variables declaration//GEN-END:variables

    private void doAddNew() {
        ThresholdObj obj = new ThresholdObj();
        mTableModel.addRow(obj);
    }

    private void doDelete() {

        int[] selectedRows = mTblThreshold.getSelectedRows();
        if (selectedRows.length > 0) {
            int retval = JOptionPane.showConfirmDialog(this, "Delete the selected items?");

            if (retval == JOptionPane.OK_OPTION) {

                int[] modelIndex = new int[selectedRows.length];
                for (int i = 0; i < selectedRows.length; i++) {
                    modelIndex[i] = mTblThreshold.convertRowIndexToModel(selectedRows[i]);
                }

                mTableModel.removeRows(modelIndex);
            }
        }
    }

    private void doSave() throws IOException {

        if (mTableModel.getRowCount() <= 0) {
            JOptionPane.showMessageDialog(this, "Nothing to save.");
            return;
        }

        JFileChooser chooser = new JFileChooser();

        int retrival = chooser.showSaveDialog(this);
        if (retrival == JFileChooser.APPROVE_OPTION) {

            File file = chooser.getSelectedFile();

            String filePath = file.getPath();
            if (!filePath.toLowerCase().endsWith(".csv")) {
                file = new File(filePath + ".csv");
            }

            final JFrame parent = this;
            final File fileSave = file;

            BackgroundTask.runBackgroundTask(new BackgroundTask() {

                private JDialog mDialog;
                private JProgressBar mProgress;

                @Override
                public void onBefore() {
                    mProgress = new JProgressBar();
                    mProgress.setIndeterminate(true);

                    mDialog = new JDialog();
                    mDialog.setLocationRelativeTo(parent);
                    mDialog.setAlwaysOnTop(true);
                    mDialog.setResizable(false);
                    mDialog.setContentPane(mProgress);
                    mDialog.setSize(400, 100);
                    mDialog.setVisible(true);
                }

                @Override
                public void onBackground() {
                    try {

                        CSVWriter writer = new CSVWriter(new FileWriter(fileSave));
                        try {
                            //Write out the header
                            writer.writeNext(new String[]{"Base/Element", "Offset", "Factor", "Sigma", "Threshold"});

                            //Write out the data
                            List<ThresholdObj> data = mTableModel.getData();
                            for (ThresholdObj obj : data) {
                                writer.writeNext(obj.toCSV());
                            }

                        } finally {
                            writer.close();
                        }
                    } catch (IOException ex) {
                        Logger.getLogger(Threshold.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                @Override
                public void onAfter() {
                    mDialog.setVisible(false);
                    System.out.println("done");
                }
            });

        }
    }

    private void doExit() {

        int retval = JOptionPane.showConfirmDialog(this, "Continue exit?");

        if (retval == JOptionPane.OK_OPTION) {
            System.exit(0);
        }

    }
}
